#version 460
#extension GL_GOOGLE_include_directive : require

layout(set = 0, binding = 0) buffer MatrixA {
    float matrix_a[];
};

layout(set = 0, binding = 1) buffer MatrixB {
    float matrix_b[];
};

layout(set = 0, binding = 2) buffer MatrixC {
    float matrix_c[];
};

layout (push_constant) uniform PushConstant {
    uint height_a;
    uint width_a;
    uint width_b;
};

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

void main() {
    uint index = gl_GlobalInvocationID.x;

    /* Calculate the row and column indices in matrix C */
    uint row = index / width_b;
    uint col = index % width_b;

    /* Perform matrix multiplication for the element at the given index */
    float sum = 0.0;
    for (int k = 0; k < width_a; ++k) {
        float a = matrix_a[row * width_a + k];
        float b = matrix_b[k * width_b + col];
        sum += a * b;
    }
    matrix_c[index] = sum;
}
